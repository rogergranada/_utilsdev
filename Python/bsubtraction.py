#!/usr/bin/python
#-*- coding: utf-8 -*-

"""
This module contains the background subtraction function. It iterates over
all image files (.jpg) removing the background and saving the new images
in the output folder.
"""
import argparse
import cv2
import os
from os.path import isdir, join 
from progressBar import ProgressBar

import pathfiles

#'/usr/share/datasets/Trainman/Kitchen/Data/data1/boild-egg/img256/'
PATH = '/usr/share/datasets/Trainman/Kitchen/Data/'
ACTIVITIES = ['boild-egg', 'ham-egg', 'kinshi-egg', 'omelette', 'scramble-egg']
SIZE_IMG = 256

def trainBackground(fgbg, data, activity, imgs):
    """
    Pass background substraction over a initial images to get the feeling.

    Parameters:
    -----------
    fgbg : cv2.createBackgroundSubtractorMOG2
        the background subtracter
    data : int
        the id of the dataset
    activity : int
        the id of the activity
    imgs : array_like
        the first images of the action
    """
    for idimg in imgs:
        path_img = join(PATH, 'data'+str(data), activity, 'img'+str(SIZE_IMG), str(idimg)+'.jpg')
        img = cv2.imread(path_img, 1)
        fgbg.apply(img)
    return fgbg


def backgroundSubtraction(inputfile):
    """
    Receives a file containing paths to images in jpg format labels.
    The background is subtracted from each image and the new image is
    saved into `outfolder`. A new path file is generated containing the
    path to the image without the background and its respective label.

    Parameters:
    -----------
    input_folder : string
        path to the folder containing images

    Notes:
    ------
    The dictionary generated by `pathfiles.genDictFromPaths()` has the form:
        dic {id_data: {activity: [(img, class)]}}
    """
    fout = open(join(PATH, 'pathbg_label.txt'), 'w')
    dic, n = pathfiles.genDictFromPaths(inputfile)
    pb = ProgressBar(n)

    for data in sorted(dic):
        for activity in dic[data]:
            imgs = sorted(dict(dic[data][activity]).keys())
            fgbg = cv2.BackgroundSubtractorMOG2()
            fgbg = trainBackground(fgbg, data, activity, imgs[:100])
            
            for idimg, y in sorted(dic[data][activity]):
                path_img = join(PATH, 'data'+str(data), activity, 'img'+str(SIZE_IMG), str(idimg)+'.jpg')
                dirbg = join(PATH, 'data'+str(data), activity, 'bg'+str(SIZE_IMG))
                if not isdir(dirbg):
                    os.mkdir(dirbg)
                path_out = join(dirbg, str(idimg)+'.jpg')
                img = cv2.imread(path_img, 1)
                fgmask = fgbg.apply(img)
                cv2.imwrite(path_out, fgmask)
                fout.write('%s %d\n' % (path_out, y))
                pb.update()
                    

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('inputfile', metavar='file_input', help='the file received as input.')
    args = parser.parse_args()

    backgroundSubtraction(args.inputfile)
